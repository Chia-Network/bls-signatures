// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class BLSSignatureBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BLSSignatureBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BLSSignatureBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __ctype_get_mb_cur_max() {
    return ___ctype_get_mb_cur_max();
  }

  late final ___ctype_get_mb_cur_maxPtr =
      _lookup<ffi.NativeFunction<size_t Function()>>('__ctype_get_mb_cur_max');
  late final ___ctype_get_mb_cur_max =
      ___ctype_get_mb_cur_maxPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atof(
      __nptr,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Int8>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Int8>)>();

  int atoi(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoi(
      __nptr,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atol(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atol(
      __nptr,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int atoll(
    ffi.Pointer<ffi.Int8> __nptr,
  ) {
    return _atoll(
      __nptr,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  double strtod(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtod(
      __nptr,
      __endptr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  double strtof(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ) {
    return _strtof(
      __nptr,
      __endptr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int strtol(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __nptr,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>, ffi.Int32)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Pointer<ffi.Int8>>, int)>();

  ffi.Pointer<ffi.Int8> l64a(
    int __n,
  ) {
    return _l64a(
      __n,
    );
  }

  late final _l64aPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int64)>>(
          'l64a');
  late final _l64a = _l64aPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  int a64l(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _a64l(
      __s,
    );
  }

  late final _a64lPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Int8>)>>(
          'a64l');
  late final _a64l = _a64lPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int select(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timeval> __timeout,
  ) {
    return _select(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  int pselect(
    int __nfds,
    ffi.Pointer<fd_set> __readfds,
    ffi.Pointer<fd_set> __writefds,
    ffi.Pointer<fd_set> __exceptfds,
    ffi.Pointer<timespec> __timeout,
    ffi.Pointer<__sigset_t> __sigmask,
  ) {
    return _pselect(
      __nfds,
      __readfds,
      __writefds,
      __exceptfds,
      __timeout,
      __sigmask,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<__sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>,
          ffi.Pointer<timespec>,
          ffi.Pointer<__sigset_t>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  void srandom(
    int __seed,
  ) {
    return _srandom(
      __seed,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> initstate(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
  ) {
    return _initstate(
      __seed,
      __statebuf,
      __statelen,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(int, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> __statebuf,
  ) {
    return _setstate(
      __statebuf,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('setstate');
  late final _setstate = _setstatePtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int random_r(
    ffi.Pointer<random_data> __buf,
    ffi.Pointer<ffi.Int32> __result,
  ) {
    return _random_r(
      __buf,
      __result,
    );
  }

  late final _random_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>>('random_r');
  late final _random_r = _random_rPtr.asFunction<
      int Function(ffi.Pointer<random_data>, ffi.Pointer<ffi.Int32>)>();

  int srandom_r(
    int __seed,
    ffi.Pointer<random_data> __buf,
  ) {
    return _srandom_r(
      __seed,
      __buf,
    );
  }

  late final _srandom_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint32, ffi.Pointer<random_data>)>>('srandom_r');
  late final _srandom_r =
      _srandom_rPtr.asFunction<int Function(int, ffi.Pointer<random_data>)>();

  int initstate_r(
    int __seed,
    ffi.Pointer<ffi.Int8> __statebuf,
    int __statelen,
    ffi.Pointer<random_data> __buf,
  ) {
    return _initstate_r(
      __seed,
      __statebuf,
      __statelen,
      __buf,
    );
  }

  late final _initstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Uint32, ffi.Pointer<ffi.Int8>, size_t,
              ffi.Pointer<random_data>)>>('initstate_r');
  late final _initstate_r = _initstate_rPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<random_data>)>();

  int setstate_r(
    ffi.Pointer<ffi.Int8> __statebuf,
    ffi.Pointer<random_data> __buf,
  ) {
    return _setstate_r(
      __statebuf,
      __buf,
    );
  }

  late final _setstate_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>>('setstate_r');
  late final _setstate_r = _setstate_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<random_data>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int __seed,
  ) {
    return _srand(
      __seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint32)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> __seed,
  ) {
    return _rand_r(
      __seed,
    );
  }

  late final _rand_rPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Uint32>)>>(
          'rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<ffi.Uint32>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  double erand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _erand48(
      __xsubi,
    );
  }

  late final _erand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Uint16>)>>(
          'erand48');
  late final _erand48 =
      _erand48Ptr.asFunction<double Function(ffi.Pointer<ffi.Uint16>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _nrand48(
      __xsubi,
    );
  }

  late final _nrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'nrand48');
  late final _nrand48 =
      _nrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> __xsubi,
  ) {
    return _jrand48(
      __xsubi,
    );
  }

  late final _jrand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ffi.Uint16>)>>(
          'jrand48');
  late final _jrand48 =
      _jrand48Ptr.asFunction<int Function(ffi.Pointer<ffi.Uint16>)>();

  void srand48(
    int __seedval,
  ) {
    return _srand48(
      __seedval,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> __seed16v,
  ) {
    return _seed48(
      __seed16v,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>>('seed48');
  late final _seed48 = _seed48Ptr
      .asFunction<ffi.Pointer<ffi.Uint16> Function(ffi.Pointer<ffi.Uint16>)>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> __param,
  ) {
    return _lcong48(
      __param,
    );
  }

  late final _lcong48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint16>)>>(
          'lcong48');
  late final _lcong48 =
      _lcong48Ptr.asFunction<void Function(ffi.Pointer<ffi.Uint16>)>();

  int drand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _drand48_r(
      __buffer,
      __result,
    );
  }

  late final _drand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('drand48_r');
  late final _drand48_r = _drand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Double>)>();

  int erand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Double> __result,
  ) {
    return _erand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _erand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Double>)>>('erand48_r');
  late final _erand48_r = _erand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Double>)>();

  int lrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _lrand48_r(
      __buffer,
      __result,
    );
  }

  late final _lrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('lrand48_r');
  late final _lrand48_r = _lrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int nrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _nrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _nrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('nrand48_r');
  late final _nrand48_r = _nrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int mrand48_r(
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _mrand48_r(
      __buffer,
      __result,
    );
  }

  late final _mrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>>('mrand48_r');
  late final _mrand48_r = _mrand48_rPtr.asFunction<
      int Function(ffi.Pointer<drand48_data>, ffi.Pointer<ffi.Int64>)>();

  int jrand48_r(
    ffi.Pointer<ffi.Uint16> __xsubi,
    ffi.Pointer<drand48_data> __buffer,
    ffi.Pointer<ffi.Int64> __result,
  ) {
    return _jrand48_r(
      __xsubi,
      __buffer,
      __result,
    );
  }

  late final _jrand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
              ffi.Pointer<ffi.Int64>)>>('jrand48_r');
  late final _jrand48_r = _jrand48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>,
          ffi.Pointer<ffi.Int64>)>();

  int srand48_r(
    int __seedval,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _srand48_r(
      __seedval,
      __buffer,
    );
  }

  late final _srand48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int64, ffi.Pointer<drand48_data>)>>('srand48_r');
  late final _srand48_r =
      _srand48_rPtr.asFunction<int Function(int, ffi.Pointer<drand48_data>)>();

  int seed48_r(
    ffi.Pointer<ffi.Uint16> __seed16v,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _seed48_r(
      __seed16v,
      __buffer,
    );
  }

  late final _seed48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>>('seed48_r');
  late final _seed48_r = _seed48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  int lcong48_r(
    ffi.Pointer<ffi.Uint16> __param,
    ffi.Pointer<drand48_data> __buffer,
  ) {
    return _lcong48_r(
      __param,
      __buffer,
    );
  }

  late final _lcong48_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<drand48_data>)>>('lcong48_r');
  late final _lcong48_r = _lcong48_rPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint16>, ffi.Pointer<drand48_data>)>();

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __nmemb,
    int __size,
  ) {
    return _calloc(
      __nmemb,
      __size,
    );
  }

  late final _callocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> reallocarray(
    ffi.Pointer<ffi.Void> __ptr,
    int __nmemb,
    int __size,
  ) {
    return _reallocarray(
      __ptr,
      __nmemb,
      __size,
    );
  }

  late final _reallocarrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('reallocarray');
  late final _reallocarray = _reallocarrayPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void free(
    ffi.Pointer<ffi.Void> __ptr,
  ) {
    return _free(
      __ptr,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> alloca(
    int __size,
  ) {
    return _alloca(
      __size,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> valloc(
    int __size,
  ) {
    return _valloc(
      __size,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, size_t,
              size_t)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(size_t, size_t)>>(
      'aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _atexit(
      __func,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __func,
  ) {
    return _at_quick_exit(
      __func,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int on_exit(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>
        __func,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _on_exit(
      __func,
      __arg,
    );
  }

  late final _on_exitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('on_exit');
  late final _on_exit = _on_exitPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void exit(
    int __status,
  ) {
    return _exit(
      __status,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('exit');
  late final _exit = _exitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int __status,
  ) {
    return _quick_exit(
      __status,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int __status,
  ) {
    return __Exit(
      __status,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int putenv(
    ffi.Pointer<ffi.Int8> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int clearenv() {
    return _clearenv();
  }

  late final _clearenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('clearenv');
  late final _clearenv = _clearenvPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mktemp(
      __template,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mktemp');
  late final _mktemp = _mktempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkstemp(
      __template,
    );
  }

  late final _mkstempPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> __template,
    int __suffixlen,
  ) {
    return _mkstemps(
      __template,
      __suffixlen,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> __template,
  ) {
    return _mkdtemp(
      __template,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int system(
    ffi.Pointer<ffi.Int8> __command,
  ) {
    return _system(
      __command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __resolved,
  ) {
    return _realpath(
      __name,
      __resolved,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              size_t,
              size_t,
              __compar_fn_t)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nmemb,
    int __size,
    __compar_fn_t __compar,
  ) {
    return _qsort(
      __base,
      __nmemb,
      __size,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, size_t, size_t, __compar_fn_t)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int, __compar_fn_t)>();

  int abs(
    int __x,
  ) {
    return _abs(
      __x,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int __x,
  ) {
    return _labs(
      __x,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int __x,
  ) {
    return _llabs(
      __x,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  div_t div(
    int __numer,
    int __denom,
  ) {
    return _div(
      __numer,
      __denom,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int32, ffi.Int32)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int __numer,
    int __denom,
  ) {
    return _ldiv(
      __numer,
      __denom,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int __numer,
    int __denom,
  ) {
    return _lldiv(
      __numer,
      __denom,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.Int64, ffi.Int64)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  ffi.Pointer<ffi.Int8> ecvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _ecvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> fcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
  ) {
    return _fcvt(
      __value,
      __ndigit,
      __decpt,
      __sign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Double, ffi.Int32,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Int8> gcvt(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int8> __buf,
  ) {
    return _gcvt(
      __value,
      __ndigit,
      __buf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Double, ffi.Int32, ffi.Pointer<ffi.Int8>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(double, int, ffi.Pointer<ffi.Int8>)>();

  int ecvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _ecvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _ecvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('ecvt_r');
  late final _ecvt_r = _ecvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int fcvt_r(
    double __value,
    int __ndigit,
    ffi.Pointer<ffi.Int32> __decpt,
    ffi.Pointer<ffi.Int32> __sign,
    ffi.Pointer<ffi.Int8> __buf,
    int __len,
  ) {
    return _fcvt_r(
      __value,
      __ndigit,
      __decpt,
      __sign,
      __buf,
      __len,
    );
  }

  late final _fcvt_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Int8>,
              size_t)>>('fcvt_r');
  late final _fcvt_r = _fcvt_rPtr.asFunction<
      int Function(double, int, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Int32>,
          ffi.Pointer<ffi.Int8>, int)>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, size_t)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbtowc(
    ffi.Pointer<wchar_t> __pwc,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbtowc(
      __pwc,
      __s,
      __n,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, size_t)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int wctomb(
    ffi.Pointer<ffi.Int8> __s,
    int __wchar,
  ) {
    return _wctomb(
      __s,
      __wchar,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Int8>, wchar_t)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int mbstowcs(
    ffi.Pointer<wchar_t> __pwcs,
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mbstowcs(
      __pwcs,
      __s,
      __n,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>,
              size_t)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<wchar_t>, ffi.Pointer<ffi.Int8>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<wchar_t> __pwcs,
    int __n,
  ) {
    return _wcstombs(
      __s,
      __pwcs,
      __n,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>,
              size_t)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<wchar_t>, int)>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> __response,
  ) {
    return _rpmatch(
      __response,
    );
  }

  late final _rpmatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __optionp,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __tokens,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __valuep,
  ) {
    return _getsubopt(
      __optionp,
      __tokens,
      __valuep,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> __loadavg,
    int __nelem,
  ) {
    return _getloadavg(
      __loadavg,
      __nelem,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int CG1ElementSize() {
    return _CG1ElementSize();
  }

  late final _CG1ElementSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('CG1ElementSize');
  late final _CG1ElementSize = _CG1ElementSizePtr.asFunction<int Function()>();

  CG1Element CG1ElementFromBytes(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CG1ElementFromBytes(
      data,
      didErr,
    );
  }

  late final _CG1ElementFromBytesPtr = _lookup<
      ffi.NativeFunction<
          CG1Element Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint8>)>>('CG1ElementFromBytes');
  late final _CG1ElementFromBytes = _CG1ElementFromBytesPtr.asFunction<
      CG1Element Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>)>();

  CG1Element CG1ElementGenerator() {
    return _CG1ElementGenerator();
  }

  late final _CG1ElementGeneratorPtr =
      _lookup<ffi.NativeFunction<CG1Element Function()>>('CG1ElementGenerator');
  late final _CG1ElementGenerator =
      _CG1ElementGeneratorPtr.asFunction<CG1Element Function()>();

  bool CG1ElementIsValid(
    CG1Element el,
  ) {
    return _CG1ElementIsValid(
          el,
        ) !=
        0;
  }

  late final _CG1ElementIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CG1Element)>>(
          'CG1ElementIsValid');
  late final _CG1ElementIsValid =
      _CG1ElementIsValidPtr.asFunction<int Function(CG1Element)>();

  int CG1ElementGetFingerprint(
    CG1Element el,
  ) {
    return _CG1ElementGetFingerprint(
      el,
    );
  }

  late final _CG1ElementGetFingerprintPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CG1Element)>>(
          'CG1ElementGetFingerprint');
  late final _CG1ElementGetFingerprint =
      _CG1ElementGetFingerprintPtr.asFunction<int Function(CG1Element)>();

  bool CG1ElementIsEqual(
    CG1Element el1,
    CG1Element el2,
  ) {
    return _CG1ElementIsEqual(
          el1,
          el2,
        ) !=
        0;
  }

  late final _CG1ElementIsEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CG1Element, CG1Element)>>(
          'CG1ElementIsEqual');
  late final _CG1ElementIsEqual =
      _CG1ElementIsEqualPtr.asFunction<int Function(CG1Element, CG1Element)>();

  CG1Element CG1ElementAdd(
    CG1Element el1,
    CG1Element el2,
  ) {
    return _CG1ElementAdd(
      el1,
      el2,
    );
  }

  late final _CG1ElementAddPtr =
      _lookup<ffi.NativeFunction<CG1Element Function(CG1Element, CG1Element)>>(
          'CG1ElementAdd');
  late final _CG1ElementAdd = _CG1ElementAddPtr.asFunction<
      CG1Element Function(CG1Element, CG1Element)>();

  CG1Element CG1ElementMul(
    CG1Element el,
    CPrivateKey sk,
  ) {
    return _CG1ElementMul(
      el,
      sk,
    );
  }

  late final _CG1ElementMulPtr =
      _lookup<ffi.NativeFunction<CG1Element Function(CG1Element, CPrivateKey)>>(
          'CG1ElementMul');
  late final _CG1ElementMul = _CG1ElementMulPtr.asFunction<
      CG1Element Function(CG1Element, CPrivateKey)>();

  CG1Element CG1ElementNegate(
    CG1Element el,
  ) {
    return _CG1ElementNegate(
      el,
    );
  }

  late final _CG1ElementNegatePtr =
      _lookup<ffi.NativeFunction<CG1Element Function(CG1Element)>>(
          'CG1ElementNegate');
  late final _CG1ElementNegate =
      _CG1ElementNegatePtr.asFunction<CG1Element Function(CG1Element)>();

  ffi.Pointer<ffi.Void> CG1ElementSerialize(
    CG1Element el,
  ) {
    return _CG1ElementSerialize(
      el,
    );
  }

  late final _CG1ElementSerializePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CG1Element)>>(
          'CG1ElementSerialize');
  late final _CG1ElementSerialize = _CG1ElementSerializePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CG1Element)>();

  void CG1ElementFree(
    CG1Element el,
  ) {
    return _CG1ElementFree(
      el,
    );
  }

  late final _CG1ElementFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CG1Element)>>(
          'CG1ElementFree');
  late final _CG1ElementFree =
      _CG1ElementFreePtr.asFunction<void Function(CG1Element)>();

  int CG2ElementSize() {
    return _CG2ElementSize();
  }

  late final _CG2ElementSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('CG2ElementSize');
  late final _CG2ElementSize = _CG2ElementSizePtr.asFunction<int Function()>();

  CG2Element CG2ElementFromBytes(
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CG2ElementFromBytes(
      data,
      didErr,
    );
  }

  late final _CG2ElementFromBytesPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Uint8>)>>('CG2ElementFromBytes');
  late final _CG2ElementFromBytes = _CG2ElementFromBytesPtr.asFunction<
      CG2Element Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>)>();

  CG2Element CG2ElementGenerator() {
    return _CG2ElementGenerator();
  }

  late final _CG2ElementGeneratorPtr =
      _lookup<ffi.NativeFunction<CG2Element Function()>>('CG2ElementGenerator');
  late final _CG2ElementGenerator =
      _CG2ElementGeneratorPtr.asFunction<CG2Element Function()>();

  bool CG2ElementIsValid(
    CG2Element el,
  ) {
    return _CG2ElementIsValid(
          el,
        ) !=
        0;
  }

  late final _CG2ElementIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CG2Element)>>(
          'CG2ElementIsValid');
  late final _CG2ElementIsValid =
      _CG2ElementIsValidPtr.asFunction<int Function(CG2Element)>();

  bool CG2ElementIsEqual(
    CG2Element el1,
    CG2Element el2,
  ) {
    return _CG2ElementIsEqual(
          el1,
          el2,
        ) !=
        0;
  }

  late final _CG2ElementIsEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CG2Element, CG2Element)>>(
          'CG2ElementIsEqual');
  late final _CG2ElementIsEqual =
      _CG2ElementIsEqualPtr.asFunction<int Function(CG2Element, CG2Element)>();

  CG2Element CG2ElementAdd(
    CG2Element el1,
    CG2Element el2,
  ) {
    return _CG2ElementAdd(
      el1,
      el2,
    );
  }

  late final _CG2ElementAddPtr =
      _lookup<ffi.NativeFunction<CG2Element Function(CG2Element, CG2Element)>>(
          'CG2ElementAdd');
  late final _CG2ElementAdd = _CG2ElementAddPtr.asFunction<
      CG2Element Function(CG2Element, CG2Element)>();

  CG2Element CG2ElementMul(
    CG2Element el,
    CPrivateKey sk,
  ) {
    return _CG2ElementMul(
      el,
      sk,
    );
  }

  late final _CG2ElementMulPtr =
      _lookup<ffi.NativeFunction<CG2Element Function(CG2Element, CPrivateKey)>>(
          'CG2ElementMul');
  late final _CG2ElementMul = _CG2ElementMulPtr.asFunction<
      CG2Element Function(CG2Element, CPrivateKey)>();

  CG2Element CG2ElementNegate(
    CG2Element el,
  ) {
    return _CG2ElementNegate(
      el,
    );
  }

  late final _CG2ElementNegatePtr =
      _lookup<ffi.NativeFunction<CG2Element Function(CG2Element)>>(
          'CG2ElementNegate');
  late final _CG2ElementNegate =
      _CG2ElementNegatePtr.asFunction<CG2Element Function(CG2Element)>();

  ffi.Pointer<ffi.Void> CG2ElementSerialize(
    CG2Element el,
  ) {
    return _CG2ElementSerialize(
      el,
    );
  }

  late final _CG2ElementSerializePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CG2Element)>>(
          'CG2ElementSerialize');
  late final _CG2ElementSerialize = _CG2ElementSerializePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CG2Element)>();

  void CG2ElementFree(
    CG2Element el,
  ) {
    return _CG2ElementFree(
      el,
    );
  }

  late final _CG2ElementFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CG2Element)>>(
          'CG2ElementFree');
  late final _CG2ElementFree =
      _CG2ElementFreePtr.asFunction<void Function(CG2Element)>();

  CPrivateKey CPrivateKeyFromBytes(
    ffi.Pointer<ffi.Void> data,
    bool modOrder,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CPrivateKeyFromBytes(
      data,
      modOrder ? 1 : 0,
      didErr,
    );
  }

  late final _CPrivateKeyFromBytesPtr = _lookup<
      ffi.NativeFunction<
          CPrivateKey Function(ffi.Pointer<ffi.Void>, ffi.Uint8,
              ffi.Pointer<ffi.Uint8>)>>('CPrivateKeyFromBytes');
  late final _CPrivateKeyFromBytes = _CPrivateKeyFromBytesPtr.asFunction<
      CPrivateKey Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Uint8>)>();

  CPrivateKey CPrivateKeyAggregate(
    ffi.Pointer<ffi.Pointer<ffi.Void>> sks,
    int len,
  ) {
    return _CPrivateKeyAggregate(
      sks,
      len,
    );
  }

  late final _CPrivateKeyAggregatePtr = _lookup<
      ffi.NativeFunction<
          CPrivateKey Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t)>>('CPrivateKeyAggregate');
  late final _CPrivateKeyAggregate = _CPrivateKeyAggregatePtr.asFunction<
      CPrivateKey Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  CG1Element CPrivateKeyGetG1Element(
    CPrivateKey sk,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CPrivateKeyGetG1Element(
      sk,
      didErr,
    );
  }

  late final _CPrivateKeyGetG1ElementPtr = _lookup<
      ffi.NativeFunction<
          CG1Element Function(
              CPrivateKey, ffi.Pointer<ffi.Uint8>)>>('CPrivateKeyGetG1Element');
  late final _CPrivateKeyGetG1Element = _CPrivateKeyGetG1ElementPtr.asFunction<
      CG1Element Function(CPrivateKey, ffi.Pointer<ffi.Uint8>)>();

  CG2Element CPrivateKeyGetG2Element(
    CPrivateKey sk,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CPrivateKeyGetG2Element(
      sk,
      didErr,
    );
  }

  late final _CPrivateKeyGetG2ElementPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(
              CPrivateKey, ffi.Pointer<ffi.Uint8>)>>('CPrivateKeyGetG2Element');
  late final _CPrivateKeyGetG2Element = _CPrivateKeyGetG2ElementPtr.asFunction<
      CG2Element Function(CPrivateKey, ffi.Pointer<ffi.Uint8>)>();

  CG2Element CPrivateKeyGetG2Power(
    CPrivateKey sk,
    CG2Element el,
  ) {
    return _CPrivateKeyGetG2Power(
      sk,
      el,
    );
  }

  late final _CPrivateKeyGetG2PowerPtr =
      _lookup<ffi.NativeFunction<CG2Element Function(CPrivateKey, CG2Element)>>(
          'CPrivateKeyGetG2Power');
  late final _CPrivateKeyGetG2Power = _CPrivateKeyGetG2PowerPtr.asFunction<
      CG2Element Function(CPrivateKey, CG2Element)>();

  bool CPrivateKeyIsEqual(
    CPrivateKey sk1,
    CPrivateKey sk2,
  ) {
    return _CPrivateKeyIsEqual(
          sk1,
          sk2,
        ) !=
        0;
  }

  late final _CPrivateKeyIsEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(CPrivateKey, CPrivateKey)>>(
          'CPrivateKeyIsEqual');
  late final _CPrivateKeyIsEqual = _CPrivateKeyIsEqualPtr.asFunction<
      int Function(CPrivateKey, CPrivateKey)>();

  ffi.Pointer<ffi.Void> CPrivateKeySerialize(
    CPrivateKey sk,
  ) {
    return _CPrivateKeySerialize(
      sk,
    );
  }

  late final _CPrivateKeySerializePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CPrivateKey)>>(
          'CPrivateKeySerialize');
  late final _CPrivateKeySerialize = _CPrivateKeySerializePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CPrivateKey)>();

  void CPrivateKeyFree(
    CPrivateKey sk,
  ) {
    return _CPrivateKeyFree(
      sk,
    );
  }

  late final _CPrivateKeyFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CPrivateKey)>>(
          'CPrivateKeyFree');
  late final _CPrivateKeyFree =
      _CPrivateKeyFreePtr.asFunction<void Function(CPrivateKey)>();

  int CPrivateKeySizeBytes() {
    return _CPrivateKeySizeBytes();
  }

  late final _CPrivateKeySizeBytesPtr =
      _lookup<ffi.NativeFunction<size_t Function()>>('CPrivateKeySizeBytes');
  late final _CPrivateKeySizeBytes =
      _CPrivateKeySizeBytesPtr.asFunction<int Function()>();

  void SecFree(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _SecFree(
      p,
    );
  }

  late final _SecFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'SecFree');
  late final _SecFree =
      _SecFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Pointer<ffi.Void>> AllocPtrArray(
    int len,
  ) {
    return _AllocPtrArray(
      len,
    );
  }

  late final _AllocPtrArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Void>> Function(
              size_t)>>('AllocPtrArray');
  late final _AllocPtrArray = _AllocPtrArrayPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Void>> Function(int)>();

  void SetPtrArray(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arrPtr,
    ffi.Pointer<ffi.Void> elemPtr,
    int index,
  ) {
    return _SetPtrArray(
      arrPtr,
      elemPtr,
      index,
    );
  }

  late final _SetPtrArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('SetPtrArray');
  late final _SetPtrArray = _SetPtrArrayPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Void>, int)>();

  void FreePtrArray(
    ffi.Pointer<ffi.Pointer<ffi.Void>> inPtr,
  ) {
    return _FreePtrArray(
      inPtr,
    );
  }

  late final _FreePtrArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('FreePtrArray');
  late final _FreePtrArray = _FreePtrArrayPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> GetPtrAtIndex(
    ffi.Pointer<ffi.Pointer<ffi.Void>> arrPtr,
    int index,
  ) {
    return _GetPtrAtIndex(
      arrPtr,
      index,
    );
  }

  late final _GetPtrAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Int32)>>('GetPtrAtIndex');
  late final _GetPtrAtIndex = _GetPtrAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  ffi.Pointer<ffi.Uint8> SecAllocBytes(
    int len,
  ) {
    return _SecAllocBytes(
      len,
    );
  }

  late final _SecAllocBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(size_t)>>(
          'SecAllocBytes');
  late final _SecAllocBytes =
      _SecAllocBytesPtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<ffi.Void> GetAddressAtIndex(
    ffi.Pointer<ffi.Uint8> ptr,
    int index,
  ) {
    return _GetAddressAtIndex(
      ptr,
      index,
    );
  }

  late final _GetAddressAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('GetAddressAtIndex');
  late final _GetAddressAtIndex = _GetAddressAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Uint8>, int)>();

  ffi.Pointer<ffi.Int8> GetLastErrorMsg() {
    return _GetLastErrorMsg();
  }

  late final _GetLastErrorMsgPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>(
          'GetLastErrorMsg');
  late final _GetLastErrorMsg =
      _GetLastErrorMsgPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  CPrivateKey CCoreMPLKeyGen(
    CCoreMPL scheme,
    ffi.Pointer<ffi.Void> seed,
    int seedLen,
    ffi.Pointer<ffi.Uint8> didErr,
  ) {
    return _CCoreMPLKeyGen(
      scheme,
      seed,
      seedLen,
      didErr,
    );
  }

  late final _CCoreMPLKeyGenPtr = _lookup<
      ffi.NativeFunction<
          CPrivateKey Function(CCoreMPL, ffi.Pointer<ffi.Void>, size_t,
              ffi.Pointer<ffi.Uint8>)>>('CCoreMPLKeyGen');
  late final _CCoreMPLKeyGen = _CCoreMPLKeyGenPtr.asFunction<
      CPrivateKey Function(
          CCoreMPL, ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Uint8>)>();

  CG1Element CCoreMPSkToG1(
    CCoreMPL scheme,
    CPrivateKey sk,
  ) {
    return _CCoreMPSkToG1(
      scheme,
      sk,
    );
  }

  late final _CCoreMPSkToG1Ptr =
      _lookup<ffi.NativeFunction<CG1Element Function(CCoreMPL, CPrivateKey)>>(
          'CCoreMPSkToG1');
  late final _CCoreMPSkToG1 = _CCoreMPSkToG1Ptr.asFunction<
      CG1Element Function(CCoreMPL, CPrivateKey)>();

  CG2Element CCoreMPLSign(
    CCoreMPL scheme,
    CPrivateKey sk,
    ffi.Pointer<ffi.Void> msg,
    int msgLen,
  ) {
    return _CCoreMPLSign(
      scheme,
      sk,
      msg,
      msgLen,
    );
  }

  late final _CCoreMPLSignPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(CCoreMPL, CPrivateKey, ffi.Pointer<ffi.Void>,
              size_t)>>('CCoreMPLSign');
  late final _CCoreMPLSign = _CCoreMPLSignPtr.asFunction<
      CG2Element Function(CCoreMPL, CPrivateKey, ffi.Pointer<ffi.Void>, int)>();

  bool CCoreMPLVerify(
    CBasicSchemeMPL scheme,
    CG1Element pk,
    ffi.Pointer<ffi.Void> msg,
    int msgLen,
    CG2Element sig,
  ) {
    return _CCoreMPLVerify(
          scheme,
          pk,
          msg,
          msgLen,
          sig,
        ) !=
        0;
  }

  late final _CCoreMPLVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(CBasicSchemeMPL, CG1Element, ffi.Pointer<ffi.Void>,
              size_t, CG2Element)>>('CCoreMPLVerify');
  late final _CCoreMPLVerify = _CCoreMPLVerifyPtr.asFunction<
      int Function(CBasicSchemeMPL, CG1Element, ffi.Pointer<ffi.Void>, int,
          CG2Element)>();

  CG1Element CCoreMPLAggregatePubKeys(
    CCoreMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pubKeys,
    int pkLen,
  ) {
    return _CCoreMPLAggregatePubKeys(
      scheme,
      pubKeys,
      pkLen,
    );
  }

  late final _CCoreMPLAggregatePubKeysPtr = _lookup<
      ffi.NativeFunction<
          CG1Element Function(CCoreMPL, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t)>>('CCoreMPLAggregatePubKeys');
  late final _CCoreMPLAggregatePubKeys =
      _CCoreMPLAggregatePubKeysPtr.asFunction<
          CG1Element Function(
              CCoreMPL, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  CG2Element CCoreMPLAggregateSigs(
    CCoreMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> sigs,
    int sigLen,
  ) {
    return _CCoreMPLAggregateSigs(
      scheme,
      sigs,
      sigLen,
    );
  }

  late final _CCoreMPLAggregateSigsPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(CCoreMPL, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t)>>('CCoreMPLAggregateSigs');
  late final _CCoreMPLAggregateSigs = _CCoreMPLAggregateSigsPtr.asFunction<
      CG2Element Function(CCoreMPL, ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  CPrivateKey CCoreMPLDeriveChildSk(
    CCoreMPL scheme,
    CPrivateKey sk,
    int index,
  ) {
    return _CCoreMPLDeriveChildSk(
      scheme,
      sk,
      index,
    );
  }

  late final _CCoreMPLDeriveChildSkPtr = _lookup<
      ffi.NativeFunction<
          CPrivateKey Function(
              CCoreMPL, CPrivateKey, ffi.Uint32)>>('CCoreMPLDeriveChildSk');
  late final _CCoreMPLDeriveChildSk = _CCoreMPLDeriveChildSkPtr.asFunction<
      CPrivateKey Function(CCoreMPL, CPrivateKey, int)>();

  CPrivateKey CCoreMPLDeriveChildSkUnhardened(
    CCoreMPL scheme,
    CPrivateKey sk,
    int index,
  ) {
    return _CCoreMPLDeriveChildSkUnhardened(
      scheme,
      sk,
      index,
    );
  }

  late final _CCoreMPLDeriveChildSkUnhardenedPtr = _lookup<
      ffi.NativeFunction<
          CPrivateKey Function(CCoreMPL, CPrivateKey,
              ffi.Uint32)>>('CCoreMPLDeriveChildSkUnhardened');
  late final _CCoreMPLDeriveChildSkUnhardened =
      _CCoreMPLDeriveChildSkUnhardenedPtr.asFunction<
          CPrivateKey Function(CCoreMPL, CPrivateKey, int)>();

  CG1Element CCoreMPLDeriveChildPkUnhardened(
    CCoreMPL scheme,
    CG1Element sk,
    int index,
  ) {
    return _CCoreMPLDeriveChildPkUnhardened(
      scheme,
      sk,
      index,
    );
  }

  late final _CCoreMPLDeriveChildPkUnhardenedPtr = _lookup<
      ffi.NativeFunction<
          CG1Element Function(CCoreMPL, CG1Element,
              ffi.Uint32)>>('CCoreMPLDeriveChildPkUnhardened');
  late final _CCoreMPLDeriveChildPkUnhardened =
      _CCoreMPLDeriveChildPkUnhardenedPtr.asFunction<
          CG1Element Function(CCoreMPL, CG1Element, int)>();

  bool CCoreMPLAggregateVerify(
    CCoreMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pks,
    int pkLen,
    ffi.Pointer<ffi.Pointer<ffi.Void>> msgs,
    ffi.Pointer<ffi.Void> msgLens,
    int msgLen,
    CG2Element sig,
  ) {
    return _CCoreMPLAggregateVerify(
          scheme,
          pks,
          pkLen,
          msgs,
          msgLens,
          msgLen,
          sig,
        ) !=
        0;
  }

  late final _CCoreMPLAggregateVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              CCoreMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              size_t,
              CG2Element)>>('CCoreMPLAggregateVerify');
  late final _CCoreMPLAggregateVerify = _CCoreMPLAggregateVerifyPtr.asFunction<
      int Function(
          CCoreMPL,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Void>,
          int,
          CG2Element)>();

  CBasicSchemeMPL NewCBasicSchemeMPL() {
    return _NewCBasicSchemeMPL();
  }

  late final _NewCBasicSchemeMPLPtr =
      _lookup<ffi.NativeFunction<CBasicSchemeMPL Function()>>(
          'NewCBasicSchemeMPL');
  late final _NewCBasicSchemeMPL =
      _NewCBasicSchemeMPLPtr.asFunction<CBasicSchemeMPL Function()>();

  bool CBasicSchemeMPLAggregateVerify(
    CBasicSchemeMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pks,
    int pksLen,
    ffi.Pointer<ffi.Pointer<ffi.Void>> msgs,
    ffi.Pointer<ffi.Void> msgsLens,
    int msgsLen,
    CG2Element sig,
  ) {
    return _CBasicSchemeMPLAggregateVerify(
          scheme,
          pks,
          pksLen,
          msgs,
          msgsLens,
          msgsLen,
          sig,
        ) !=
        0;
  }

  late final _CBasicSchemeMPLAggregateVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              CBasicSchemeMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              size_t,
              CG2Element)>>('CBasicSchemeMPLAggregateVerify');
  late final _CBasicSchemeMPLAggregateVerify =
      _CBasicSchemeMPLAggregateVerifyPtr.asFunction<
          int Function(
              CBasicSchemeMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              int,
              CG2Element)>();

  void CBasicSchemeMPLFree(
    CBasicSchemeMPL scheme,
  ) {
    return _CBasicSchemeMPLFree(
      scheme,
    );
  }

  late final _CBasicSchemeMPLFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CBasicSchemeMPL)>>(
          'CBasicSchemeMPLFree');
  late final _CBasicSchemeMPLFree =
      _CBasicSchemeMPLFreePtr.asFunction<void Function(CBasicSchemeMPL)>();

  CAugSchemeMPL NewCAugSchemeMPL() {
    return _NewCAugSchemeMPL();
  }

  late final _NewCAugSchemeMPLPtr =
      _lookup<ffi.NativeFunction<CAugSchemeMPL Function()>>('NewCAugSchemeMPL');
  late final _NewCAugSchemeMPL =
      _NewCAugSchemeMPLPtr.asFunction<CAugSchemeMPL Function()>();

  CG2Element CAugSchemeMPLSign(
    CAugSchemeMPL scheme,
    CPrivateKey sk,
    ffi.Pointer<ffi.Void> msg,
    int msgLen,
  ) {
    return _CAugSchemeMPLSign(
      scheme,
      sk,
      msg,
      msgLen,
    );
  }

  late final _CAugSchemeMPLSignPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(CAugSchemeMPL, CPrivateKey, ffi.Pointer<ffi.Void>,
              size_t)>>('CAugSchemeMPLSign');
  late final _CAugSchemeMPLSign = _CAugSchemeMPLSignPtr.asFunction<
      CG2Element Function(
          CAugSchemeMPL, CPrivateKey, ffi.Pointer<ffi.Void>, int)>();

  CG2Element CAugSchemeMPLSignPrepend(
    CAugSchemeMPL scheme,
    CPrivateKey sk,
    ffi.Pointer<ffi.Void> msg,
    int msgLen,
    CG1Element prepPk,
  ) {
    return _CAugSchemeMPLSignPrepend(
      scheme,
      sk,
      msg,
      msgLen,
      prepPk,
    );
  }

  late final _CAugSchemeMPLSignPrependPtr = _lookup<
      ffi.NativeFunction<
          CG2Element Function(CAugSchemeMPL, CPrivateKey, ffi.Pointer<ffi.Void>,
              size_t, CG1Element)>>('CAugSchemeMPLSignPrepend');
  late final _CAugSchemeMPLSignPrepend =
      _CAugSchemeMPLSignPrependPtr.asFunction<
          CG2Element Function(CAugSchemeMPL, CPrivateKey, ffi.Pointer<ffi.Void>,
              int, CG1Element)>();

  bool CAugSchemeMPLVerify(
    CAugSchemeMPL scheme,
    CG1Element pk,
    ffi.Pointer<ffi.Void> msg,
    int msgLen,
    CG2Element sig,
  ) {
    return _CAugSchemeMPLVerify(
          scheme,
          pk,
          msg,
          msgLen,
          sig,
        ) !=
        0;
  }

  late final _CAugSchemeMPLVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(CAugSchemeMPL, CG1Element, ffi.Pointer<ffi.Void>,
              size_t, CG2Element)>>('CAugSchemeMPLVerify');
  late final _CAugSchemeMPLVerify = _CAugSchemeMPLVerifyPtr.asFunction<
      int Function(
          CAugSchemeMPL, CG1Element, ffi.Pointer<ffi.Void>, int, CG2Element)>();

  bool CAugSchemeMPLAggregateVerify(
    CAugSchemeMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pks,
    int pksLen,
    ffi.Pointer<ffi.Pointer<ffi.Void>> msgs,
    ffi.Pointer<ffi.Void> msgsLens,
    int msgsLen,
    CG2Element sig,
  ) {
    return _CAugSchemeMPLAggregateVerify(
          scheme,
          pks,
          pksLen,
          msgs,
          msgsLens,
          msgsLen,
          sig,
        ) !=
        0;
  }

  late final _CAugSchemeMPLAggregateVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              CAugSchemeMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              size_t,
              CG2Element)>>('CAugSchemeMPLAggregateVerify');
  late final _CAugSchemeMPLAggregateVerify =
      _CAugSchemeMPLAggregateVerifyPtr.asFunction<
          int Function(
              CAugSchemeMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>,
              int,
              CG2Element)>();

  void CAugSchemeMPLFree(
    CAugSchemeMPL scheme,
  ) {
    return _CAugSchemeMPLFree(
      scheme,
    );
  }

  late final _CAugSchemeMPLFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CAugSchemeMPL)>>(
          'CAugSchemeMPLFree');
  late final _CAugSchemeMPLFree =
      _CAugSchemeMPLFreePtr.asFunction<void Function(CAugSchemeMPL)>();

  CPopSchemeMPL NewCPopSchemeMPL() {
    return _NewCPopSchemeMPL();
  }

  late final _NewCPopSchemeMPLPtr =
      _lookup<ffi.NativeFunction<CPopSchemeMPL Function()>>('NewCPopSchemeMPL');
  late final _NewCPopSchemeMPL =
      _NewCPopSchemeMPLPtr.asFunction<CPopSchemeMPL Function()>();

  CG2Element CPopSchemeMPLPopProve(
    CPopSchemeMPL scheme,
    CPrivateKey sk,
  ) {
    return _CPopSchemeMPLPopProve(
      scheme,
      sk,
    );
  }

  late final _CPopSchemeMPLPopProvePtr = _lookup<
          ffi.NativeFunction<CG2Element Function(CPopSchemeMPL, CPrivateKey)>>(
      'CPopSchemeMPLPopProve');
  late final _CPopSchemeMPLPopProve = _CPopSchemeMPLPopProvePtr.asFunction<
      CG2Element Function(CPopSchemeMPL, CPrivateKey)>();

  bool CPopSchemeMPLPopVerify(
    CPopSchemeMPL scheme,
    CG1Element pk,
    CG2Element sig,
  ) {
    return _CPopSchemeMPLPopVerify(
          scheme,
          pk,
          sig,
        ) !=
        0;
  }

  late final _CPopSchemeMPLPopVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(CPopSchemeMPL, CG1Element,
              CG2Element)>>('CPopSchemeMPLPopVerify');
  late final _CPopSchemeMPLPopVerify = _CPopSchemeMPLPopVerifyPtr.asFunction<
      int Function(CPopSchemeMPL, CG1Element, CG2Element)>();

  bool CPopSchemeMPLFastAggregateVerify(
    CPopSchemeMPL scheme,
    ffi.Pointer<ffi.Pointer<ffi.Void>> pks,
    int pksLen,
    ffi.Pointer<ffi.Void> msgs,
    int msgsLen,
    CG2Element sig,
  ) {
    return _CPopSchemeMPLFastAggregateVerify(
          scheme,
          pks,
          pksLen,
          msgs,
          msgsLen,
          sig,
        ) !=
        0;
  }

  late final _CPopSchemeMPLFastAggregateVerifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              CPopSchemeMPL,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              size_t,
              ffi.Pointer<ffi.Void>,
              size_t,
              CG2Element)>>('CPopSchemeMPLFastAggregateVerify');
  late final _CPopSchemeMPLFastAggregateVerify =
      _CPopSchemeMPLFastAggregateVerifyPtr.asFunction<
          int Function(CPopSchemeMPL, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
              ffi.Pointer<ffi.Void>, int, CG2Element)>();

  void CPopSchemeMPLFree(
    CPopSchemeMPL scheme,
  ) {
    return _CPopSchemeMPLFree(
      scheme,
    );
  }

  late final _CPopSchemeMPLFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CPopSchemeMPL)>>(
          'CPopSchemeMPLFree');
  late final _CPopSchemeMPLFree =
      _CPopSchemeMPLFreePtr.asFunction<void Function(CPopSchemeMPL)>();
}

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

typedef size_t = ffi.Uint64;

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

typedef __time_t = ffi.Int64;
typedef __suseconds_t = ffi.Int64;

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __syscall_slong_t = ffi.Int64;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef __fd_mask = ffi.Int64;

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

typedef __compar_fn_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef wchar_t = ffi.Int32;
typedef CG1Element = ffi.Pointer<ffi.Void>;
typedef CPrivateKey = ffi.Pointer<ffi.Void>;
typedef CG2Element = ffi.Pointer<ffi.Void>;
typedef CCoreMPL = ffi.Pointer<ffi.Void>;
typedef CBasicSchemeMPL = CCoreMPL;
typedef CAugSchemeMPL = CCoreMPL;
typedef CPopSchemeMPL = CCoreMPL;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int _STDINT_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 31;

const int _SYS_CDEFS_H = 1;

const int __glibc_c99_flexarr_available = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_TYPES_H = 1;

const int __TIMESIZE = 64;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int NULL = 0;

const int _STDLIB_H = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int __WNOTHREAD = 536870912;

const int __WALL = 1073741824;

const int __WCLONE = 2147483648;

const int __ENUM_IDTYPE_T = 1;

const int __W_CONTINUED = 65535;

const int __WCOREFLAG = 128;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int _SYS_TYPES_H = 1;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __BIT_TYPES_DEFINED__ = 1;

const int _ENDIAN_H = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _SYS_SELECT_H = 1;

const String __FD_ZERO_STOS = 'stosq';

const int __sigset_t_defined = 1;

const int _SIGSET_NWORDS = 16;

const int __timeval_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int __NFDBITS = 64;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _ALLOCA_H = 1;
